import re
# Импортирует модуль re, который предоставляет функциональность для работы с регулярными выражениями в Python
from functools import reduce
# Импортирует функцию reduce из модуля functools
# Функция reduce используется для применения функции к элементам списка, последовательно сводя его к одному значению
from collections import OrderedDict
# Импортирует класс OrderedDict из модуля collections
# Класс OrderedDict представляет упорядоченный словарь, который запоминает порядок добавления элементов

def addPost(init, post):
# Определяет функцию addPost, которая принимает два аргумента
# init - словарь, содержащий информацию о новостях, и post - кортеж (номер новости, текст новости)
    rang = int(post[0])
    # Извлекает номер новости из кортежа post и преобразует его в целое число
    oldmaxiter = init['maxitem']
    # Сохраняет текущее значение максимального номера новости из словаря init в переменную oldmaxiter
    init.update({'maxitem': rang if rang > init['maxitem'] else init['maxitem']})
    # Обновляет значение максимального номера новости в словаре init
    # Если номер новости больше текущего максимального номера новости, то он становится новым максимальным номером новости, иначе оставляется старое значение
    if oldmaxiter < rang:
        init['posts'].append(post[1])
        # Если номер новости больше текущего максимального номера новости, то текст новости добавляется в список новостей в словаре init
    return init
    # Возвращает словарь init

news = []
# Создает пустой список news
pattern = re.compile(r'([\d]+)\s*(.*)', re.M)
# Компилирует регулярное выражение, которое соответствует строке, начинающейся с номера новости, за которым следует произвольный текст
# Результатом будет список кортежей, каждый из которых содержит номер новости и текст новости

with open("news_text.txt", 'r') as f:
    news = f.read()
    # Открывает файл с именем file_name на чтение и считывает его содержимое в строку news.
    news = pattern.findall(news)
    # Применяет регулярное выражение pattern к строке news и возвращает список кортежей, соответствующих новостям.

if news:
#  Проверяет, что список новостей не пуст.
    result = reduce(addPost, news, OrderedDict({'maxitem': 0, 'posts': []}))
    # Использует функцию reduce для применения функции addPost к каждому элементу списка news, начиная с начального значения OrderedDict({'maxitem': 0, 'posts': []})
    # Результатом является словарь result, содержащий информацию о новостях.
    [print(i) for i in result['posts']]
    # Выводит текст каждой новости в списке result['posts'].